


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000                 AREA             Swap, CODE, READONLY
    4 00000000                 EXPORT           __main
    5 00000000         
    6 00000000         
    7 00000000         __main
    8 00000000 4826            LDR              R0, =0xE000ED88 ;Read value at 
                                                            the address of the 
                                                            Coprocessor Access 
                                                            Control Register
    9 00000002 6801            LDR              R1,[R0]
   10 00000004 F441 0170       ORR              R1,R1,#(0xF << 20) 
                                                            ;Enable CP10,CP11
   11 00000008 6001            STR              R1,[R0]
   12 0000000A         
   13 0000000A         ; Reciprocal Square Root Estimate code
   14 0000000A         ; r1 holds the address to the odd table
   15 0000000A A01C            ADR              R0, RecipSQRTTableOdd
   16 0000000C         ; r2 holds the address to the even table
   17 0000000C A113            ADR              R1, RecipSQRTTableEven
   18 0000000E         
   19 0000000E         ; Compute the reciprocal square root estimate for a
   20 0000000E         ; single precision value X x 2^n as
   21 0000000E         ; 1/(X)^-1/2. The estimate table is stored in two
   22 0000000E         ; halves, the first for odd exponents
   23 0000000E         ; RecipSqrtTableOdd) and the second for
   24 0000000E         ; even exponents (RecipSqrtTableEven).
   25 0000000E ED9F 0A13       VLDR.F           S0, InputValue
   26 00000012 EE10 2A10       VMOV.F           R2, S0
   27 00000016         ; Process the exponent first – we assume positive input
   28 00000016 4613            MOV              R3, R2      ; exp in r2, frac i
                                                            n r3
   29 00000018 EA4F 52D2       LSR              R2, #23     ; shift the exponen
                                                            t for subtraction
   30 0000001C F1A2 027F       SUB              R2, #127    ; subtract out the 
                                                            bias
   31 00000020 F002 0401       AND              R4, R2, #1  ; capture the lsb t
                                                            o r4
   32 00000024 F094 0F01       TEQ              R4, #1      ; check for odd exp
                                                            onent
   33 00000028         
   34 00000028         ; Odd Exponent - add 1 before the negate and shift
   35 00000028         ; right operations
   36 00000028 BF08 3201       ADDEQ            r2,#1
   37 0000002C         ; All exponents
   38 0000002C EA4F 0252       LSR              r2, r2, #1  ; shift right by 1 
                                                            to divide by 2
   39 00000030 F1C2 0200       NEG              r2, r2      ; negate
   40 00000034 F102 027F       ADD              r2, #127    ; add in the bias
   41 00000038 EA4F 52C2       LSL              r2, #23     ; return the new ex
                                                            ponent - the
   42 0000003C         ; Extract the upper 4 fraction bits for the table lookup
                       
   43 0000003C F403 03F0       AND              r3, #0x00780000
   44 00000040 EA4F 4393       LSR              r3, #18     ; shift so they are
                                                             *2
   45 00000044         ; Select the table and the table entry based on
   46 00000044         ; the upper fraction bits



ARM Macro Assembler    Page 2 


   47 00000044 BF0C 5A1C       LDRHEQ           r4, [r3, r0]
   48 00000048 5A5C            LDRHNE           r4, [r3, r1] ; index into the e
                                                            ven table
   49 0000004A EE01 4A90       VMOV.F           s3, r4      ; copy the selected
                                                             half-precision
   50 0000004E EEB2 2A61       VCVTB.F32.F16    s4, s3      ; convert the estim
                                                            ate to sp
   51 00000052 EE02 2A90       VMOV.F           s5, r2      ; move the exp mult
                                                            iplier to s5
   52 00000056 EE22 3A82       VMUL.F           s6, s5, s4  ; compute the recip
                                                             estimate
   53 0000005A         
   54 0000005A E7FE    loop    B                loop
   55 0000005C                 ALIGN
   56 0000005C         
   57 0000005C         InputValue
   58 0000005C         ; Test values. Uncomment the value to convert
   59 0000005C         ; DCD 0x42333333 ; 44.8, recip sqrt is 0.1494, odd exp
   60 0000005C         ; DCD 0x41CA3D71 ; 25.28, recip sqrt is 0.19889, even ex
                       p
   61 0000005C         
   62 0000005C         RecipSQRTTableEven
   63 0000005C 00 3C           DCW              0x3C00      ; 1.0000 -> 1.0000
   64 0000005E C3 3B           DCW              0x3BC3      ; 1.0625 -> 0.9701
   65 00000060 8B 3B           DCW              0x3B8B      ; 1.1250 -> 0.9428
   66 00000062 57 3A           DCW              0x3A57      ; 1.1875 -> 0.9177
   67 00000064 28 3B           DCW              0x3B28      ; 1.2500 -> 0.8944
   68 00000066 FC 3A           DCW              0x3AFC      ; 1.3125 -> 0.8729
   69 00000068 D3 3A           DCW              0x3AD3      ; 1.3750 -> 0.8528
   70 0000006A AC 3A           DCW              0x3AAC      ; 1.4375 -> 0.8340
   71 0000006C 88 3A           DCW              0x3A88      ; 1.5000 -> 0.8165
   72 0000006E 66 3A           DCW              0x3A66      ; 1.5625 -> 0.8000
   73 00000070 47 3A           DCW              0x3A47      ; 1.6250 -> 0.7845
   74 00000072 29 3A           DCW              0x3A29      ; 1.6875 -> 0.7698
   75 00000074 0C 3A           DCW              0x3A0C      ; 1.7500 -> 0.7559
   76 00000076 F1 39           DCW              0x39F1      ; 1.8125 -> 0.7428
   77 00000078 D8 39           DCW              0x39D8      ; 1.8750 -> 0.7303
   78 0000007A BF 39           DCW              0x39BF      ; 1.9375 -> 0.7184
   79 0000007C         
   80 0000007C                 ALIGN
   81 0000007C         
   82 0000007C         RecipSQRTTableOdd
   83 0000007C         
   84 0000007C A8 3D           DCW              0x3DA8      ; 0.5000 -> 1.4142
   85 0000007E 7C 3D           DCW              0x3D7C      ; 0.5322 -> 1.3707
   86 00000080 55 3D           DCW              0x3D55      ; 0.5625 -> 1.3333
   87 00000082 31 3D           DCW              0x3D31      ; 0.5938 -> 1.2978
   88 00000084 0F 3D           DCW              0x3D0F      ; 0.6250 -> 1.2649
   89 00000086 F0 3C           DCW              0x3CF0      ; 0.6563 -> 1.2344
   90 00000088 D3 3C           DCW              0x3CD3      ; 0.6875 -> 1.2060
   91 0000008A B8 3C           DCW              0x3CB8      ; 0.7186 -> 1.1795
   92 0000008C 9E 3C           DCW              0x3C9E      ; 0.7500 -> 1.1547
   93 0000008E 87 3C           DCW              0x3C87      ; 0.7813 -> 1.1313
   94 00000090 70 3C           DCW              0x3C70      ; 0.8125 -> 1.1094
   95 00000092 5B 3C           DCW              0x3C5B      ; 0.8438 -> 1.0886
   96 00000094 47 3C           DCW              0x3C47      ; 0.8750 -> 1.0690
   97 00000096 34 3C           DCW              0x3C34      ; 0.9063 -> 1.0504
   98 00000098 22 3C           DCW              0x3C22      ; 0.9375 -> 1.0328
   99 0000009A 10 3C           DCW              0x3C10      ; 0.9688 -> 1.0160



ARM Macro Assembler    Page 3 


  100 0000009C         
  101 0000009C                 ALIGN
  102 0000009C                 END
              E000ED88 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_stm32f4 -IC:\Keil_
v5\V518a\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\V518a\ARM\PACK\Kei
l\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="_
_MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 525" --predefine="_RTE_ S
ETA 1" --predefine="STM32F411xE SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InputValue 0000005C

Symbol: InputValue
   Definitions
      At line 57 in file main.s
   Uses
      At line 25 in file main.s
Comment: InputValue used once
RecipSQRTTableEven 0000005C

Symbol: RecipSQRTTableEven
   Definitions
      At line 62 in file main.s
   Uses
      At line 17 in file main.s
Comment: RecipSQRTTableEven used once
RecipSQRTTableOdd 0000007C

Symbol: RecipSQRTTableOdd
   Definitions
      At line 82 in file main.s
   Uses
      At line 15 in file main.s
Comment: RecipSQRTTableOdd used once
Swap 00000000

Symbol: Swap
   Definitions
      At line 3 in file main.s
   Uses
      None
Comment: Swap unused
__main 00000000

Symbol: __main
   Definitions
      At line 7 in file main.s
   Uses
      At line 4 in file main.s
Comment: __main used once
loop 0000005A

Symbol: loop
   Definitions
      At line 54 in file main.s
   Uses
      At line 54 in file main.s
Comment: loop used once
6 symbols
343 symbols in table
