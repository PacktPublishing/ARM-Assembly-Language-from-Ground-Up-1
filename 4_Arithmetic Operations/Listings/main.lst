


ARM Macro Assembler    Page 1 


    1 00000000         ;We’re going to repeat the same example once again. This
                        time we will write the program in a more compact fashio
                       n,
    2 00000000         ;still using the ADR (load register with address instruc
                       tion).
    3 00000000         ;To simplify the code, we’ve used simple numeric offsets
                        (because there is relatively little data and the user c
                       omments
    4 00000000         ;tell us what’s happening. Note that we have used labels
                        Q, R, and S for the data. These labels are redundant an
                       d are not
    5 00000000         ;needed since they are not referred to anywhere else in 
                       the program. There’s nothing wrong with this. These labe
                       ls just
    6 00000000         ;serve as a reminder to the programmer.
    7 00000000         
    8 00000000                 AREA             SimpleAdd, CODE, READONLY
    9 00000000                 EXPORT           __main
   10 00000000         
   11 00000000         
   12 00000000         __main
   13 00000000 A003            ADR              R0,P        ;R0 point to data a
                                                            rea
   14 00000002 6841            LDR              R1,[R0,#4]  ;load Q into r1
   15 00000004 6882            LDR              R2,[R0,#8]  ;load R into r2
   16 00000006 440A            ADD              R2,R1,R2    ;add Q and R
   17 00000008 68C1            LDR              R1,[R0,#12] ;load S into R3
   18 0000000A 440A            ADD              R2,R2,R1    ;add S to the total
                                                            
   19 0000000C 6011            STR              R1,[R2]     ;save the result in
                                                             memory 
   20 0000000E         
   21 0000000E E7FE    Stop    B                Stop
   22 00000010         
   23 00000010                 AREA             SimpleAdd, DATA,READWRITE
   24 00000010 00 00 00 
              00       P       SPACE            4
   25 00000014 00000002 
                       Q       DCD              2
   26 00000018 00000004 
                       R       DCD              4
   27 0000001C 00000005 
                       S       DCD              5
   28 00000020         
   29 00000020                 ALIGN
   30 00000020                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_stm32f4 -IC:\Keil_
v5\V518a\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\V518a\ARM\PACK\Kei
l\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="_
_MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 525" --predefine="_RTE_ S
ETA 1" --predefine="STM32F411xE SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

P 00000010

Symbol: P
   Definitions
      At line 24 in file main.s
   Uses
      At line 13 in file main.s
Comment: P used once
Q 00000014

Symbol: Q
   Definitions
      At line 25 in file main.s
   Uses
      None
Comment: Q unused
R 00000018

Symbol: R
   Definitions
      At line 26 in file main.s
   Uses
      None
Comment: R unused
S 0000001C

Symbol: S
   Definitions
      At line 27 in file main.s
   Uses
      None
Comment: S unused
SimpleAdd 00000000

Symbol: SimpleAdd
   Definitions
      At line 8 in file main.s
   Uses
      None
Comment: SimpleAdd unused
Stop 0000000E

Symbol: Stop
   Definitions
      At line 21 in file main.s
   Uses
      At line 21 in file main.s
Comment: Stop used once
__main 00000000

Symbol: __main
   Definitions
      At line 12 in file main.s
   Uses
      At line 9 in file main.s
Comment: __main used once
7 symbols
342 symbols in table
